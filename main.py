# main.py
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from config import API_TOKEN, UPLOADS_DIR, RESULTS_DIR, PROMTS_DIR, LOG_FILE_PATH
from app2023 import handle_style_choice_callback, handle_style_transfer, handle_one_photo
from app2024 import handle_content_photo, handle_style_photo
from utils import check_service_availability
import tensorflow_hub as hub
import tensorflow as tf
from functools import partial
from states import StyleChoice, DialogStates  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
import os
import uuid
import base64
from io import BytesIO
from PIL import Image
import numpy as np

# Fooocus 2.1.701
# pip install tensorflow==2.10.0 # windows cuda 12.6 cuddn 9.3 drivers 560.94
# –¥–∞—Ç–∞—Å–µ—Ç—ã https://github.com/junyanz/CycleGAN/blob/master/datasets/download_dataset.sh
# pip install realesrgan # –ª—è —É–≤–µ–ª–µ—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥–µ
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
#logging.basicConfig(filename=LOG_FILE_PATH, level=logging.INFO)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # –û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è TensorFlow, –∫—Ä–æ–º–µ –æ—à–∏–±–æ–∫
import tensorflow as tf
tf.get_logger().setLevel('ERROR')  # –û—Ç–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ TensorFlow
import warnings
warnings.filterwarnings("ignore", category=UserWarning)  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=API_TOKEN,
    timeout=420
)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
photo_filename = None
file_data = None
file_bytes = None
file_path = None
photo_file = None
encoded_image = None
original_image_data = None
photo_url = None
chosen_style_description = None
chosen_style_neodescription = None
image_data_uri = None
seed_rnd = None
result_image_file = None
result_filename = None
result_filename2 = None
processing_message_id = None
desired_size = (512, 512)

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if not os.path.exists(UPLOADS_DIR):
    os.makedirs(UPLOADS_DIR)
if not os.path.exists(RESULTS_DIR):
    os.makedirs(RESULTS_DIR)

async def send_welcome(message: types.Message, state: FSMContext):
    await DialogStates.Start.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    await DialogStates.Continue.set()

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    variant1_button = types.KeyboardButton("–¥–≤–µ —Ñ–æ—Ç–æ (–ø—Ä–æ–µ–∫—Ç 24)")
    variant2_button = types.KeyboardButton("–æ–¥–Ω–æ —Ñ–æ—Ç–æ (–ø—Ä–æ–µ–∫—Ç 23)")
    reply_markup.add(variant1_button, variant2_button)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    await DialogStates.ChoosingVariant.set()
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
async def handle_start_button(message: types.Message, state: FSMContext):
    #await state.finish()
    await send_welcome(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
async def handle_variant_choice(message: types.Message, state: FSMContext):
    logging.info(f"User {message.from_user.id} chose variant: {message.text}")
    user_id = message.from_user.id
    if message.text == "–¥–≤–µ —Ñ–æ—Ç–æ (–ø—Ä–æ–µ–∫—Ç 24)":
        await state.update_data(variant="two_photos")
        await message.answer("–í—ã–±—Ä–∞–Ω \"–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è\"", reply_markup=types.ReplyKeyboardRemove())
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–µ/–∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await DialogStates.WaitingForContentPhoto.set()
    elif message.text == "–æ–¥–Ω–æ —Ñ–æ—Ç–æ (–ø—Ä–æ–µ–∫—Ç 23)":
        await state.update_data(variant="one_photo")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.", reply_markup=types.ReplyKeyboardRemove())
        await DialogStates.WaitingForPhoto.set()
    else:
        await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –ú–ï–ù–Æ - –°–¢–ê–†–¢.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photos(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    variant = user_data.get('variant')

    if variant == "two_photos":
        current_state = await state.get_state()
        if current_state == "DialogStates:WaitingForContentPhoto":
            await DialogStates.WaitingForStylePhoto.set()
            await handle_content_photo(message, state, bot)
        elif current_state == "DialogStates:WaitingForStylePhoto":
            await message.answer("–°–ø–∞—Å–∏–±–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
            await DialogStates.Start.set()
            await handle_style_photo(message, state, bot)
    elif variant == "one_photo":
        await handle_one_photo(message, state, bot)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def return_to_start(message: types.Message, state: FSMContext):
    await send_welcome(message, state)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 'help'])
    dp.register_message_handler(handle_start_button, lambda message: message.text.lower() == '–Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–æ', state="DialogStates:finish")
    dp.register_message_handler(handle_variant_choice, lambda message: message.text in ["–¥–≤–µ —Ñ–æ—Ç–æ (–ø—Ä–æ–µ–∫—Ç 24)", "–æ–¥–Ω–æ —Ñ–æ—Ç–æ (–ø—Ä–æ–µ–∫—Ç 23)"], state="*")
    dp.register_message_handler(partial(handle_photos, bot=bot), content_types=types.ContentTypes.PHOTO, state="*")
    dp.register_callback_query_handler(partial(handle_style_choice_callback, bot=bot, model=model), lambda query: True, state="StyleChoice:ChoosingStyle")
    dp.register_message_handler(handle_one_photo, content_types=types.ContentTypes.PHOTO, state="DialogStates:WaitingForPhoto")
    dp.register_message_handler(return_to_start, commands=['start', 'help'], state="*")
    dp.register_message_handler(handle_content_photo, content_types=types.ContentTypes.PHOTO, state="DialogStates:WaitingForContentPhoto")
    dp.register_message_handler(handle_style_photo, content_types=types.ContentTypes.PHOTO, state="DialogStates:WaitingForStylePhoto")
    #dp.register_message_handler(handle_style_photo, lambda message: message.text.lower() == '–Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–æ', state="DialogStates:finish")
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é on_startup, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup(dp):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!" –Ω–∞ chat_id = 153330435
    await bot.send_message(chat_id=153330435, text="ü§ñ  –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –∫–∞–∫ –≥–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ executor.start_polling()
    # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç dp –∏ —Ñ—É–Ω–∫—Ü–∏—é on_startup –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    register_handlers(dp)
    executor.start_polling(dp, on_startup=on_startup)
