# app2024.py
import os
import uuid
import logging
from aiogram import Bot, types
from aiogram.dispatcher import FSMContext
from config import UPLOADS_DIR, RESULTS_DIR, TIME_ASK
from nst import NeuralStyleTransfer
from aiogram.types import Message
import asyncio
from io import BytesIO
import tensorflow as tf
import gc

logger = logging.getLogger(__name__)

physical_devices = tf.config.list_physical_devices('GPU')
if physical_devices:
    tf.config.experimental.set_memory_growth(physical_devices[0], True)

async def handle_content_photo(message: types.Message, state: FSMContext, bot: Bot):
    try:
        user_id = message.from_user.id
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = os.path.join(UPLOADS_DIR, str(user_id))
        os.makedirs(user_dir, exist_ok=True)
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_dir}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        file_info = await bot.get_file(message.photo[-1].file_id)
        content_filename = f"content_{uuid.uuid4()}.jpg"
        content_path = os.path.join(user_dir, content_filename)

        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_info.file_path} -> {content_path}")
        await bot.download_file(file_info.file_path, content_path)
        
        logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {content_path}")
        await state.update_data(content_path=content_path)
        await message.answer("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await state.set_state("DialogStates:WaitingForStylePhoto")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def update_timer(message: Message, total_time: int):
    for remaining in range(total_time, 0, -5):
        try:
            await message.edit_text(f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫...")
        except:
            pass
        await asyncio.sleep(5)

async def handle_style_photo(message: types.Message, state: FSMContext, bot: Bot):
    processor = None  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω–∞—á–∞–ª–µ
    try:
        user_id = message.from_user.id
        unique_folder = os.path.join(UPLOADS_DIR, str(user_id))
        os.makedirs(unique_folder, exist_ok=True)
        data = await state.get_data()
        content_path = data['content_path']
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        style_image_file = await bot.get_file(message.photo[-1].file_id)
        file_path = style_image_file.file_path        
        style_path = os.path.join(unique_folder, f"style_{uuid.uuid4()}.jpg")
        file_data = await bot.download_file(file_path)
        file_bytes = BytesIO(file_data.read())        
        with open(style_path, 'wb') as photo_file:
            photo_file.write(file_bytes.getvalue())
        
        logger.info(f"–°—Ç–∏–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {style_path}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        timer_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        timer_task = asyncio.create_task(update_timer(timer_msg, TIME_ASK))

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        processor = NeuralStyleTransfer(img_size=512)
        result_image = await asyncio.get_event_loop().run_in_executor(
            None,
            processor.transfer_style,
            content_path,
            style_path
        )


        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        timer_task.cancel()
        await timer_msg.delete()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_folder = os.path.join(RESULTS_DIR, str(user_id))
        os.makedirs(result_folder, exist_ok=True)
        result_path = os.path.join(result_folder, f"{uuid.uuid4()}_style_2024.png")
        result_image.save(result_path)
        
        with open(result_path, 'rb') as photo:
            await message.answer_photo(photo, caption="üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    finally:
        # –Ø–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ __del__
        if processor is not None:
            del processor
            gc.collect()
        await state.finish()